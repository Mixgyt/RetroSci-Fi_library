@use "variables" as v;
@use "mixins/grid" as grid-mixin;
@use "sass:map";

.row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -(calc(v.$gutter-width / 2));
    margin-left: -(calc(v.$gutter-width / 2));
}

[class*="col-"] {
    padding-right: calc(v.$gutter-width / 2);
    padding-left: calc(v.$gutter-width / 2);
}


// Creacion de la clases de columnas col-1, col-2, col-3,
@for $i from 1 through v.$grid-columns { //bucle que recorre el numero de columnas (12)
    .col-#{$i} {
        @include grid-mixin.make-col($i);
    }
}

// Hacemos las columnas responsivas
@each $breakpoint, $max-width in v.$container-max-widths {
    @media (min-width: #{map.get(v.$grid-breakpoints, $breakpoint)}) {
        @for $i from 1 through v.$grid-columns {
            .col-#{$breakpoint}-#{$i} {
                @include grid-mixin.make-col($i);
            }
        }
    }
}

.col {
    position: relative;
    width: 100%;
    padding-right: (v.$gutter-width / 2);
    padding-left: (v.$gutter-width / 2);
    flex: 1 0 0%;
  }
.col-auto {
    flex: 0 0 auto;
    width: auto;
}

//crear todas las clases de columnas auto col-sm-auto, col-md-auto, col-lg-auto
@each $breakpoint, $value in v.$grid-breakpoints {
    @media (min-width: $value) {
        .col-#{$breakpoint}-auto {
            @include grid-mixin.make-col-auto();
        }
    }
}

// gap modificador del row
@for $i from 0 through 5 {
    .g-#{$i} {
        gap: #{$i * 0.25}rem;
    }

    .gx-#{$i} {
        column-gap: #{$i * 0.25}rem;
    }

    .gy-#{$i} {
        row-gap: #{$i * 0.25}rem;
    }
}

// generar las clases de columnas para el grid-row
@for $i from 1 through v.$grid-row-columns{

     @include grid-mixin.make-row-cols($i);
}
// Hacemos las columnas responsivas
@include grid-mixin.make-responsive-row-cols();